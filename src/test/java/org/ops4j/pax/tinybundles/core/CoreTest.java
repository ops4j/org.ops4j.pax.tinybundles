/* * Copyright 2009 Toni Menzel. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or * implied. * * See the License for the specific language governing permissions and * limitations under the License. */package org.ops4j.pax.tinybundles.core;import java.io.File;import java.io.IOException;import java.io.InputStream;import java.net.URL;import java.util.Map;import java.util.jar.JarInputStream;import java.util.jar.Manifest;import junit.framework.Assert;import org.junit.Test;import org.osgi.framework.Constants;import org.ops4j.pax.tinybundles.core.BuildableBundle;import org.ops4j.pax.tinybundles.core.builders.AsyncRawBuilder;import org.ops4j.pax.tinybundles.core.builders.SynchronousRawBuilder;import org.ops4j.pax.tinybundles.core.intern.Info;import org.ops4j.pax.tinybundles.demo.DemoAnonymousInnerClass;import org.ops4j.pax.tinybundles.demo.HelloWorld;import org.ops4j.pax.tinybundles.demo.intern.HelloWorldImpl;import org.ops4j.pax.tinybundles.demo.intern.MyFirstActivator;import static junit.framework.Assert.*;import static org.ops4j.pax.tinybundles.core.TinyBundles.*;/** * This is a standalone test. * Practically you define your bundle in java api and finally will get the bundle written to disk. * * This is mainly for demonstrative purposes. * Real value comes when using tinybundles together with a pax exam test. * * @author Toni Menzel (tonit) * @since Apr 9, 2009 */public abstract class CoreTest {    private static final String HEADER_CREATED_BY = "Created-By";    private static final String HEADER_TOOL = "Tool";    private static final String HEADER_TINYBUNDLES_VERSION = "TinybundlesVersion";    private static final String HEADER_BUILT_BY = "Built-By";    abstract BuildableBundle getStrategy();    @Test    public void createTest()        throws IOException    {        InputStream inp = bundle( getStrategy() )            .add( MyFirstActivator.class )            .add( HelloWorld.class )            .add( HelloWorldImpl.class )            .set( Constants.BUNDLE_SYMBOLICNAME, "MyFirstTinyBundle" )            .set( Constants.EXPORT_PACKAGE, "demo" )            .set( Constants.IMPORT_PACKAGE, "demo" )            .set( Constants.BUNDLE_ACTIVATOR, MyFirstActivator.class.getName() )            .build();        // test output        JarInputStream jout = new JarInputStream( inp );        Manifest man = jout.getManifest();        Assert.assertEquals( "demo", man.getMainAttributes().getValue( Constants.IMPORT_PACKAGE ) );        Assert.assertEquals( "demo", man.getMainAttributes().getValue( Constants.EXPORT_PACKAGE ) );        jout.close();    }    @Test    public void defaultSetProps()        throws IOException    {        InputStream inp = bundle( getStrategy() ).build();        // test output        JarInputStream jout = new JarInputStream( inp );        Manifest man = jout.getManifest();        assertEquals( "Header " + HEADER_CREATED_BY, "pax-tinybundles-" + Info.getPaxTinybundlesVersion(), man.getMainAttributes().getValue( HEADER_CREATED_BY ) );        assertEquals( "Header " + HEADER_TOOL, "pax-tinybundles-" + Info.getPaxTinybundlesVersion(), man.getMainAttributes().getValue( HEADER_TOOL ) );        assertEquals( "Header " + HEADER_TINYBUNDLES_VERSION, "pax-tinybundles-" + Info.getPaxTinybundlesVersion(), man.getMainAttributes().getValue( HEADER_TINYBUNDLES_VERSION ) );        assertEquals( System.getProperty( "user.name" ), man.getMainAttributes().getValue( HEADER_BUILT_BY ) );        jout.close();    }    @Test    public void modifyTest()        throws IOException    {        InputStream inp1 = bundle( getStrategy() )            .add( MyFirstActivator.class )            .add( HelloWorld.class )            .add( HelloWorldImpl.class )            .set( Constants.BUNDLE_SYMBOLICNAME, "MyFirstTinyBundle" )            .set( Constants.EXPORT_PACKAGE, "demo" )            .set( Constants.IMPORT_PACKAGE, "demo" )            .set( Constants.BUNDLE_ACTIVATOR, MyFirstActivator.class.getName() )            .build();        InputStream inp2 = bundle( getStrategy() ).read( inp1 )            .set( Constants.EXPORT_PACKAGE, "bacon" )            .build();        // test output        JarInputStream jout = new JarInputStream( inp2 );        Manifest man = jout.getManifest();        Assert.assertEquals( "demo", man.getMainAttributes().getValue( Constants.IMPORT_PACKAGE ) );        Assert.assertEquals( "bacon", man.getMainAttributes().getValue( Constants.EXPORT_PACKAGE ) );        jout.close();    }    @Test    public void allInnerClassesTest()        throws IOException    {        bundle( new BuildableBundle() {			public InputStream build(Map<String, URL> resources, Map<String, String> headers) {				Assert.assertTrue(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass.class"));				Assert.assertTrue(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$1.class"));				Assert.assertTrue(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$SomeInnerClass.class"));				Assert.assertTrue(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$SomeInnerClass$1.class"));				return null;			}		}).add( DemoAnonymousInnerClass.class, InnerClassStrategy.ALL ).build();    }    @Test    public void anonymousInnerClassesTest()        throws IOException    {        bundle( new BuildableBundle() {			public InputStream build(Map<String, URL> resources, Map<String, String> headers) {				Assert.assertTrue(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass.class"));				Assert.assertTrue(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$1.class"));				Assert.assertFalse(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$SomeInnerClass.class"));				Assert.assertFalse(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$SomeInnerClass$1.class"));				return null;			}		}).add( DemoAnonymousInnerClass.class, InnerClassStrategy.ANONYMOUS ).build();    }    @Test    public void noInnerClassesTest()        throws IOException    {        bundle( new BuildableBundle() {			public InputStream build(Map<String, URL> resources, Map<String, String> headers) {				Assert.assertTrue(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass.class"));				Assert.assertFalse(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$1.class"));				Assert.assertFalse(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$SomeInnerClass.class"));				Assert.assertFalse(resources.containsKey("org/ops4j/pax/tinybundles/demo/DemoAnonymousInnerClass$SomeInnerClass$1.class"));				return null;			}		}).add( DemoAnonymousInnerClass.class, InnerClassStrategy.NONE ).build();    }}